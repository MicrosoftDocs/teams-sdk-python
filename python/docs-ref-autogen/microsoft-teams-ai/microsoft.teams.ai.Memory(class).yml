### YamlMime:PythonClass
uid: microsoft.teams.ai.Memory
name: Memory
fullName: microsoft.teams.ai.Memory
module: microsoft.teams.ai
summary: 'Protocol for conversation memory storage implementations.


  Memory stores and retrieves conversation messages, enabling persistent

  context across multiple interactions with AI models.'
constructor:
  syntax: Memory(*args, **kwargs)
methods:
- uid: microsoft.teams.ai.Memory.get_all
  name: get_all
  summary: Get all messages from memory.
  signature: async get_all() -> list[Union[microsoft.teams.ai.message.UserMessage,
    microsoft.teams.ai.message.ModelMessage, microsoft.teams.ai.message.SystemMessage,
    microsoft.teams.ai.message.FunctionMessage]]
  return:
    description: List of all stored messages in chronological order
- uid: microsoft.teams.ai.Memory.push
  name: push
  summary: Add a message to memory.
  signature: 'async push(message: UserMessage | ModelMessage | SystemMessage | FunctionMessage)
    -> None'
  parameters:
  - name: message
    description: The message to store (user, model, system, or function message)
    isRequired: true
- uid: microsoft.teams.ai.Memory.set_all
  name: set_all
  summary: Replace all messages in memory with the provided list.
  signature: 'async set_all(messages: list[Union[microsoft.teams.ai.message.UserMessage,
    microsoft.teams.ai.message.ModelMessage, microsoft.teams.ai.message.SystemMessage,
    microsoft.teams.ai.message.FunctionMessage]]) -> None'
  parameters:
  - name: messages
    description: New list of messages to store, replacing existing content
    isRequired: true
